# Have Half The Service Mesh With Half The Mess

Carson Anderson
DevX-O / Principal Engineer, Weave
@carson_ops

https://github.com/carsonoid/talk-half-the-mesh-half-the-mess

##

.image assets/weave.png _ 1000

## The problem

##

.image diagrams/core-problem.png _ 1000

##

.image diagrams/core-problem-1.png _ 1000

##

.image diagrams/core-problem-2.png _ 1000

##

.image assets/cncf-meshes.png _ 1000

.link https://landscape.cncf.io

## Why not just use <insert service mesh here>?

## Linkerd - CRDs

.code ./assets/mesh-overhead//linkerd/crds.txt

## Linkerd - Resources

.code ./assets/mesh-overhead//linkerd/resources.txt

## Istio - CRDs

.code ./assets/mesh-overhead//istio/crds.txt

## Istio - Resources

.code ./assets/mesh-overhead//istio/resources.txt

## What do you mean "Half The Mesh"?

##

.image diagrams/full-mesh.png _ 1000

##

.image diagrams/mesh-components.png _ 1000

## Full Mesh Solutions

* Linkerd
  * 13 CRDs
  * 42 Resources

* Istio:

  * 14 CRDs
  * 29 Resources

## "Half Mesh" Solutions

* Sidecar Only
  * 0 CRDs
  * 1 Resource

* Control Plane Only
  * 0 CRDs
  * 5 Resources

## Disclaimer

The "half meshes" we build to day are not intended
to compete with what you can do using a full service mesh product.

I personally have no problems with either the Linkerd or Istio projects. They are
both amazing projects.

I stand on the shoulders of giants. These "half mesh" solutions are built on amazing
tools and projects from the CNCF ecosystem.

## The Plan

1. Test Server And Client Code
2. xDS Fundamentals
3. Sidecar only mesh using Envoy and xDS files
5. Control Plane only mesh using gRPC and xDS

## Test Server Code

## Test Server Code - HTTP

.code cmd/server/main.go /START HTTP /,/END HTTP /

## Test Server Code - gRPC

.code cmd/server/main.go /START GRPC /,/END GRPC /

## Test Client

## Test Client Code - HTTP

.code cmd/client/main.go /START HTTP /,/END HTTP /

## Test Client Code - gRPC

.code cmd/client/main.go /START GRPC /,/END GRPC /

## xDS Fundamentals

## What is xDS?

* "eXtensible" Discovery Service?
  * The "x" is a variable! Examples: RDS, CDS, EDS, LDS, etc.

In short:

A standardized way to describe networking resources

* Managed by the Envoy project but used elsewhere (Ex: go-grpc implementation)

## The Fundamental Resources

xDS supports many different resources, this presentation primarily deals with

* Listeners (LDS)
    * A tcp/udp listener
* Routes (RDS)
    * Configuration describing how traffic should be routed
* Clusters (CDS)
    * Collections of endpoints (ips/hostnames) that provide a specific network resource
* Endpoints (EDS)
    * Sometimes a separate resource, sometimes in clusters

## The Fundamental Resources

.image diagrams/xds-parts.png _ 900

## Half Mesh 1 - Sidecar only mesh using Envoy and xDS files

## Sidecar Only Mesh Diagram

.image diagrams/half-mesh-sidecar.png _ 1000

## Server Resources - Deployment 1

Absolutely basic Kubernetes Deployment

.code 1-sidecar-only/k8s-services.yaml /START DEPLOYMENT1 /,/END DEPLOYMENT1 /

## Server Resources - Deployment 2

Absolutely basic Kubernetes Deployment... Again

.code 1-sidecar-only/k8s-services.yaml /START DEPLOYMENT2 /,/END DEPLOYMENT2 /

## Server Resources - Service 1

A bare bones Kubernetes Service

.code 1-sidecar-only/k8s-services.yaml /START SERVICE1 /,/END SERVICE1 /

## Server Resources - Service 2

A bare bones Kubernetes Service... Again

.code 1-sidecar-only/k8s-services.yaml /START SERVICE2 /,/END SERVICE2 /

## Client Resources - Deployment

.code 1-sidecar-only/k8s-clients.yaml /START DEPLOYMENT1 /,/END DEPLOYMENT1 /

## Client Resources - Deployment - Sidecar

.code 1-sidecar-only/k8s-clients.yaml /START CONTAINERS /,/END CONTAINERS /

## Client Resources - Envoy Config - Main

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_INTRO /,/END CONFIGMAP_INTRO /

## Client Resources - Envoy Config - CDS

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_CDS /,/END CONFIGMAP_CDS /

## Client Resources - Envoy Config - LDS

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_LDS /,/END CONFIGMAP_LDS /

## Client Resources - Envoy Config - LDS Continued

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_LDS_ROUTES /,/END CONFIGMAP_LDS_ROUTES /

```
const target = "http://service.local:8080"
```

## Client Resources - How much code?

.play 1-sidecar-only/cloc.go /START RUN/,/END RUN/


## Client Resources - How much code?

.image assets/sidecar-only-summary.png 560 _

## But where did that config come from?

The xDS API spec is very well defined and extensively documented.

.link https://www.envoyproxy.io/docs/envoy/latest/start/quick-start/run-envoy#run-envoy-with-the-demo-configuration Envoy Quick Start

.link https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol xDS API Docs

Getting comfortable with the documentation is the key to using envoy successfully

## Demo Time!

## One-Time Setup

This has to be run once to build the app used by every demo

.play 0-setup/run.go /START RUN /,/END RUN /

## Sidecar Only Demo

.play 1-sidecar-only/run.go /START RUN /,/END RUN /

## New Features Unlocked!

By simply generating and changing the envoy configuration for a service we can enable so many new service mesh features:

* Header-based routing
* Automatic Retries
* Connection Pooling
* Outlier Detection
* Circuit Breaking
* Rate Limiting
* Tracing
* Header manipulation
* And more!


## Q: Could I Just Use...

* Caddy
* Nginx
* Traefik
* HA Proxy
* Contour
* Gloo
* Any other Kubernetes Ingress controller:
  * https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/

## Answer

Yep!

This "half mesh" isn't a novel or unique idea. In fact, many tools that you
might use in the place of pure envoy are just wrappers around envoy.

The goal is to see how you can get mesh-like features without the overhead or
abstraction.

## Q: Why use Envoy then?

## Answer

* Envoy is built to be a sidecar
* Envoy has almost no opinions
* Envoy has a huge feature set
* Envoy uses xDS for configuration, which we build on in the next half mesh

## Half Mesh 2 - Control Plane Only

##

.image diagrams/half-mesh-cp-k8s.png _ 1000

## Half Mesh 2 - Control Plane Only

* Write **Our Own** Control plane
  * Use Kubernetes to provide config via Service resources
* Use smart gRPC Clients
  * Go
  * Javascript
  * Java
  * C++*
  * Python*
  * Ruby*
  * PHP*

.link https://github.com/grpc/grpc/blob/master/doc/grpc_xds_features.md Feature Support By Language

## Seriously? Write A Whole Control Plane?

Yep! It is much, much easier than you think thanks to the hard work of the Evoy team.

All the hard work has been is done in the control plane package:

.link https://github.com/envoyproxy/go-control-plane

## 

We are going to make our own abstraction using annotations on services

.code 2-control-plane-only/k8s-services.yaml /START SERVICE /,/END SERVICE /

## Control Plane Logic

Writing a custom control plane boils down to only a few steps:

1. Create an xDS cache using `go-control-plane`
2. Watch Kubernetes Services and Endpoints
3. Generate our and use xDS resource definitions

## 1. Create an xDS cache using `go-control-plane`

## 1. Create an xDS cache using `go-control-plane`

Imports:

.code cmd/control-plane/main/main.go  /START STEP1_IMPORT /,/END STEP1_IMPORT /

.code cmd/control-plane/main/main.go  /START STEP1 /,/END STEP1 /

## 2. Watch Kubernetes Services and Endpoints

## Kubernetes Watch Setup

.code cmd/control-plane/main/kube.go  /START WATCH /,/END WATCH /

## Kubernetes Watch Services

.code cmd/control-plane/main/kube.go  /START SVCWATCH /,/END SVCWATCH /

## Kubernetes Watch Endpoints

.code cmd/control-plane/main/kube.go  /START EPWATCH /,/END EPWATCH /

## Kubernetes Watch Event Work

.code cmd/control-plane/main/kube.go  /START UPDATE CACHE /,/END UPDATE CACHE /

## Kubernetes Watch Event Work

.code cmd/control-plane/main/kube.go  /START GET SNAPSHOT /,/END GET SNAPSHOT /

## 3. Generate our and use xDS resource definitions

## getResources()

.code cmd/control-plane/main/kube.go  /START RESOURCES /,/END RESOURCES /

## getResources()

.code cmd/control-plane/main/kube.go  /START RESOURCES2 /,/END RESOURCES2 /

## getListener()

.code cmd/control-plane/main/kube.go  /func getListener/,/^}/

## Recall...

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_LDS_ROUTES/,/END CONFIGMAP_LDS_ROUTES/

## getRoute()

```
const target = "xds:///service"
```

.code cmd/control-plane/main/kube.go  /func getRoute/,/^}/

## Recall...

.code 1-sidecar-only/k8s-clients.yaml /START CONFIGMAP_CDS/,/END CONFIGMAP_CDS/

## getClusters()

.code cmd/control-plane/main/kube.go  /func getClusters/,/^}/

## getEndpoints()

.code cmd/control-plane/main/kube.go  /func getEndpoints/,/^}/

## How much code?

.play 2-control-plane-only/cloc.go  /START RUN /,/END RUN /

## Control Plane Kubernetes Setup

## Control Plane - Deployment

.code 2-control-plane-only/k8s-control-plane.yaml /START DEPLOYMENT /,/END DEPLOYMENT /

## Control Plane - Service

.code 2-control-plane-only/k8s-control-plane.yaml /START SERVICE /,/END SERVICE /

## Demo Client Deployment Changes

.code 2-control-plane-only/k8s-clients.yaml  /START DEPLOYMENT /,/END DEPLOYMENT /

> We also no longer need the `hostAliases`

## Demo Time!

## Control Plane Kube Demo

.play 2-control-plane-only/run.go /START RUN /,/END RUN /

## New Features Unlocked!

By simply changing the xDS resources the control plane generates
you can add:

* Load Balancing
* Header-based routing
* Outlier Detection
* Circuit Breaking
* Rate Limiting
* Header manipulation
* And more!

##

.image diagrams/summary.png _ 1000
